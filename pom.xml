<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.ezfun.guess</groupId>
    <artifactId>guess</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>guess</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>1.8</java.version>
        <project.release.version>0.0.1-SNAPSHOT</project.release.version>
    </properties>
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <project.release.version>0.0.1-SNAPSHOT</project.release.version>
            </properties>
            <activation>
                <!-- profile默认是否激活的标志 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <project.release.version>1.0.RELEASE</project.release.version>
            </properties>
        </profile>
    </profiles>
    <!--依赖和扩展的远程仓库列表-->
    <repositories>
        <!--包含需要连接到远程仓库的信息-->
        <repository>
            <!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->
            <id>aliyun-central</id>
            <!-- 远程仓库名称 -->
            <name>aliyun maven</name>
            <!-- 远程仓库URL，按protocol://hostname/path形式 -->
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <!--在上面描述仓库的时候，提到他们有统一的布局。Maven 2有它仓库默认布局。然而，Maven 1.x有不同布局。使用这个元素来表明它是default还是legacy。-->
            <!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 -->
            <layout>default</layout>
            <!--  如何处理远程仓库里发布版本的下载 这是各种构件的策略，release或者snapshot。这两个集合，POM就可以根据独立仓库任意类型的依赖改变策略。如：一个人可能只激活下载snapshot  用来开发。-->
            <releases>
                <!--true或者false，决定仓库是否对于各自的类型激活(release 或者 snapshot)。-->
                <!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
                <enabled>true</enabled>
                <!--这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的. 有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.-->
                <!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
                <updatePolicy>always</updatePolicy>
                <!--当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。可选的为：ignore，fail，warn，或者不正确的校验和。-->
                <!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 -->
                <checksumPolicy>warn</checksumPolicy>
            </releases>
            <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->
            <snapshots>
                <enabled>false</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>fail</checksumPolicy>
            </snapshots>
        </repository>
        <!--<repository>-->
        <!--<id>springsource-repos</id>-->
        <!--<name>SpringSource Repository</name>-->
        <!--<url>http://repo.spring.io/release/</url>-->
        <!--</repository>-->
        <!--<repository>-->
        <!--<id>central-repos</id>-->
        <!--<name>Central Repository</name>-->
        <!--<url>http://repo.maven.apache.org/maven2</url>-->
        <!--</repository>-->
        <!--<repository>-->
        <!--<id>central-repos2</id>-->
        <!--<name>Central Repository 2</name>-->
        <!--<url>http://repo1.maven.org/maven2/</url>-->
        <!--</repository>-->
    </repositories>
    <!-- 发现插件的远程仓库列表，这些插件用于构建和报表 -->
    <pluginRepositories>
        <!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
        <pluginRepository>
            <id>central</id>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <name>aliyun</name>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
    <!--它管理的分布在整个构建过程生成的工件和支持文件-->
    <!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 -->
    <!--releases：线上版本（生产环境使用的）-->
    <!--snapshots：快照版本（开发过程中使用的）-->
    <!--maven 打包代码到私服根据version 后面是否带有“-SNAPSHOTS” 来区分是打包线上版本还是快照版本，如果带有“-SNAPSHOTS”  打包快照版本，否则即为线上版本-->
    <!--mvn deploy 打包使用 默认版本 ;打包设置版本 mvn deploy -p Prod 生产环境 mvn deploy -P dev 开发环境-->
    <distributionManagement>
        <!--指定Maven pom从远程下载控件到当前项目的位置和方式，如果snapshotRepository没有被定义则使用repository相关的配置-->
        <!-- 部署项目产生的构件到远程仓库需要的信息 -->
        <repository>
            <!--true或false，指明控件部署的时候是否获取独立的版本号。-->
            <!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 -->
            <uniqueVersion>false</uniqueVersion>
            <!--仓库的唯一标识-->
            <id>maven-snapshots</id>
            <name>Nexus RELEASE Repository</name>
            <!--repository元素的核心。指定位置和部署协议发布控件到仓库。-->
            <url>http://localhost:8081/repository/maven-releases/</url>
            <!--布局，default或legacy-->
            <layout>default</layout>
        </repository>
        <!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 -->
        <snapshotRepository>
            <id>maven-snapshots</id>
            <name>Nexus SNAPSHOTS Repository</name>
            <url>http://localhost:8081/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.soysaucelm</groupId>
            <artifactId>mybatis-plugin-plus</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
            <version>2.6.2</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。
- compile ：默认范围，用于编译
- provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath
- runtime: 在执行时需要使用
- test: 用于test任务时使用
- system: 需要外在提供相应的元素。通过systemPath来取得
- systemPath: 仅用于范围为system。提供相应的路径
- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 -->
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>25.0-jre</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.60</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>com.lmax</groupId>-->
        <!--<artifactId>disruptor</artifactId>-->
        <!--<version>3.3.0</version>-->
        <!--</dependency>-->

        <!-- https://mvnrepository.com/artifact/com.lmax/disruptor -->
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
            <version>3.4.2</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.10</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.5</version>
        </dependency>
        <dependency>
            <groupId>org.apache.mahout</groupId>
            <artifactId>mahout-math</artifactId>
            <version>0.9</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>se.scalablesolutions.akka</groupId>-->
        <!--<artifactId>akka-actor</artifactId>-->
        <!--<version>1.3.1</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor_2.12</artifactId>
            <version>2.5.3</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.typesafe.akka/akka-actor -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor_2.13</artifactId>
            <version>2.6.1</version>
        </dependency>

        <!--<dependency>-->
        <!--<groupId>se.scalablesolutions.akka</groupId>-->
        <!--<artifactId>akka-spring</artifactId>-->
        <!--<version>1.3.1</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>com.cwbase</groupId>
            <artifactId>logback-redis-appender</artifactId>
            <version>1.1.3</version>
            <exclusions>
                <exclusion>
                    <groupId>redis.clients</groupId>
                    <artifactId>jedis</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>



        <!-- elasticsearch 7.4.0 -->
    <!--    <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
            <version>7.4.0</version>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
            <version>7.4.0</version>
        </dependency>-->


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
        </dependency>


    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>${basedir}/src/main/java</directory>
                <includes>
                    <include>**/application*.yml</include>
                    <include>**/application*.properties</include>

                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <includes>
                    <include>application*.yml</include>
                    <include>*.properties</include>
                    <include>*/*.properties</include>
                    <include>*/*.html</include>
                    <include>*.xml</include>
                    <include>*</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.7</version>
                <configuration>
                    <configurationFile>${project.basedir}/src/main/resources/generator.xml</configurationFile>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.github.soysaucelm</groupId>
                        <artifactId>mybatis-plugin-plus</artifactId>
                        <version>1.0.0</version>
                    </dependency>
                    <!--<dependency>-->
                    <!--<groupId>mysql</groupId>-->
                    <!--<artifactId>mysql-connector-java</artifactId>-->
                    <!--<version>${mysql.version}</version>-->
                    <!--</dependency>-->
                    <!--<dependency>-->
                    <!--<groupId>tk.mybatis</groupId>-->
                    <!--<artifactId>mapper</artifactId>-->
                    <!--<version>4.1.5</version>-->
                    <!--</dependency>-->
                </dependencies>
            </plugin>
        </plugins>
    </build>

</project>
